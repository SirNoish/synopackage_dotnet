using Moq;
using Synopackage.Model.Caching.Exceptions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Synopackage.Model.Tests;
public class CacheOptionsManagerTests
{


  public CacheOptionsManagerTests()
  {

  }

  #region Test autogenerated code
  [Fact]
  public void GetCacheIconExpirationInDaysFromDefaults()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheIconExpirationInDays = 20
        }
      });

    //act
    var result = manager.GetCacheIconExpirationInDays();

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheIconExpirationInDaysFromDefaultsWhenSourceIsNotDefined()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheIconExpirationInDays = 20
        }
      });

    //act
    var result = manager.GetCacheIconExpirationInDays("other");

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheIconExpirationInDaysFromSource()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheIconExpirationInDays = 20
        },
        SourcesOverrides = new Dictionary<string, CacheSettings>()
        {
          { "test", new CacheSettings() { CacheIconExpirationInDays = 30 } }
        }
      });


    //act
    var result = manager.GetCacheIconExpirationInDays("test");

    //assert
    result.ShouldBe(30);
  }

  [Fact]
  public void GetCacheSpkServerResponseFromDefaults()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponse = true
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponse();

    //assert
    result.ShouldBe(true);
  }

  [Fact]
  public void GetCacheSpkServerResponseFromDefaultsWhenSourceIsNotDefined()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponse = true
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponse("other");

    //assert
    result.ShouldBe(true);
  }

  [Fact]
  public void GetCacheSpkServerResponseFromSource()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponse = true
        },
        SourcesOverrides = new Dictionary<string, CacheSettings>()
        {
          { "test", new CacheSettings() { CacheSpkServerResponse = false } }
        }
      });


    //act
    var result = manager.GetCacheSpkServerResponse("test");

    //assert
    result.ShouldBe(false);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursFromDefaults()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHours = 20
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponseTimeInHours();

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursFromDefaultsWhenSourceIsNotDefined()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHours = 20
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponseTimeInHours("other");

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursFromSource()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHours = 20
        },
        SourcesOverrides = new Dictionary<string, CacheSettings>()
        {
          { "test", new CacheSettings() { CacheSpkServerResponseTimeInHours = 30 } }
        }
      });


    //act
    var result = manager.GetCacheSpkServerResponseTimeInHours("test");

    //assert
    result.ShouldBe(30);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursForRepositoryFromDefaults()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHoursForRepository = 20
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponseTimeInHoursForRepository();

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursForRepositoryFromDefaultsWhenSourceIsNotDefined()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHoursForRepository = 20
        }
      });

    //act
    var result = manager.GetCacheSpkServerResponseTimeInHoursForRepository("other");

    //assert
    result.ShouldBe(20);
  }

  [Fact]
  public void GetCacheSpkServerResponseTimeInHoursForRepositoryFromSource()
  {
    //arrange
    CacheOptionsManager manager = new CacheOptionsManager(
      new CacheOptions()
      {
        Defaults = new CacheSettings()
        {
          CacheSpkServerResponseTimeInHoursForRepository = 20
        },
        SourcesOverrides = new Dictionary<string, CacheSettings>()
        {
          { "test", new CacheSettings() { CacheSpkServerResponseTimeInHoursForRepository = 30 } }
        }
      });


    //act
    var result = manager.GetCacheSpkServerResponseTimeInHoursForRepository("test");

    //assert
    result.ShouldBe(30);
  }
  #endregion

}

